{"version":3,"sources":["components/StepBar.js","components/Billing.js","components/Payment.js","App.js","serviceWorker.js","index.js"],"names":["StepBar","props","Step","Group","fluid","active","this","section","disabled","Icon","name","color","Content","Title","Description","React","Component","Billing","items","map","item","key","List","Item","id","onClick","e","toggleItemSelection","className","selected","size","verticalAlign","icon","align","Header","as","description","amount","divided","relaxed","selection","QRCode","require","Payment","getPaymentUrl","value","Segment","raised","Button","animated","backlink","visible","hidden","primary","window","location","href","App","getPaymentAmount","state","reduce","sum","setState","index","togglePage","confirmed","Container","Statistic","horizontal","Label","Value","amountTracker","updateAmount","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce094152.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Icon, Step } from 'semantic-ui-react'\r\n\r\nclass StepBar extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    render () {\r\n        return (\r\n\r\n            <Step.Group fluid>\r\n                <Step active={this.props.section == 0} disabled={this.props.section != 0}  >\r\n                    <Icon name='cart' color={this.props.section == 0 ? 'blue' : 'grey'} />\r\n                    <Step.Content>\r\n                        <Step.Title>Billing</Step.Title>\r\n                        <Step.Description>Enter billing information</Step.Description>\r\n                    </Step.Content>\r\n                </Step>\r\n                <Step active={this.props.section == 1} disabled={this.props.section != 1}>\r\n                    <Icon name='money bill alternate outline' color={this.props.section == 1 ? 'blue' : 'grey'} />\r\n                    <Step.Content>\r\n                        <Step.Title>Payment</Step.Title>\r\n                        <Step.Description>Make the payment</Step.Description>\r\n                    </Step.Content>\r\n                </Step>\r\n            </Step.Group>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default StepBar","import React from 'react'\r\nimport { List } from 'semantic-ui-react'\r\n\r\nclass Billing extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    render () {\r\n        this.items = (this.props.items || []).map((item, key) =>\r\n            <List.Item key={item.id}\r\n                onClick={e => this.props.toggleItemSelection(key)} className={item.selected ? 'selectedItem' : 'unselectedItem'}>\r\n                <List.Icon name={item.selected ? 'check circle outline' : 'circle outline'} color={item.selected ? 'yellow' : 'grey'} size='large' verticalAlign='middle' />\r\n                <List.Icon name={item.icon} color={item.color} size='large' verticalAlign='middle' />\r\n                <List.Content align='left' >\r\n                    <List.Header as='a'>{item.name}</List.Header>\r\n                    <List.Description as='a'>{item.description}</List.Description>\r\n                </List.Content>\r\n                <List.Content align='right' className='listItemPrice'>{item.amount} <span>â‚¹</span></List.Content>\r\n            </List.Item >\r\n        );\r\n\r\n        return (\r\n\r\n            <List divided relaxed selection>\r\n                {this.items}\r\n            </List>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Billing","import React from 'react'\r\nimport { Statistic, Button, Icon, Segment } from 'semantic-ui-react'\r\nvar QRCode = require('qrcode.react');\r\n\r\nclass Payment extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    getPaymentUrl = () => {\r\n        return 'upi://pay?pa=9422376826@paytm&pn=Alpesh%20Patil&tr=alpeshgit&tn=Pay%20to%20Alpesh&am=' + this.props.amount + '&mam=null&cu=INR'\r\n    }\r\n    render () {\r\n\r\n        return (\r\n            <div>\r\n                <QRCode value={this.getPaymentUrl()} /><br />\r\n                <Segment raised className='mfooter'>\r\n                    <Button animated onClick={() => this.props.backlink()}>\r\n                        <Button.Content visible>Back</Button.Content>\r\n                        <Button.Content hidden>\r\n                            <Icon name='arrow left' />\r\n                        </Button.Content>\r\n                    </Button>\r\n                    <Button primary onClick={() => window.location.href = this.getPaymentUrl()}>Pay Now</Button>\r\n                </Segment>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Payment","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\n\nimport {\n  Button,\n  Icon,\n  Container,\n  Statistic,\n  Segment\n} from 'semantic-ui-react';\n\nimport StepBar from './components/StepBar';\nimport Billing from './components/Billing';\nimport Payment from './components/Payment';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      confirmed: false,\n      section: 0,\n      items: [\n        {\n          id: 1,\n          name: 'Green Tea',\n          icon: 'coffee',\n          color: 'green',\n          description: 'Healthy Green Tea.',\n          amount: 20,\n          selected: false\n        },\n        {\n          id: 2,\n          name: 'Espresso',\n          icon: 'coffee',\n          color: 'black',\n          description: 'Dark Hot Coffee.',\n          amount: 30,\n          selected: false\n        }\n      ]\n    }\n  }\n  getPaymentAmount = () => {\n\n    let amount = this.state.items.reduce((sum, item) => item.selected ? sum + item.amount : sum, 0)\n    return amount\n  }\n  toggleItemSelection = (key) => {\n    this.setState(state => {\n      const items = state.items.map((item, index) => {\n        if (key === index) {\n          item.selected = !item.selected\n          return item;\n        } else {\n          return item;\n        }\n      });\n      return {\n        items,\n      };\n    });\n  }\n  togglePage = () => {\n\n    this.setState({ confirmed: !this.state.confirmed, section: ((this.state.section + 1) % 2) });\n  }\n  render () {\n    return (\n      <div className=\"App\" >\n        <StepBar section={this.state.section} />\n        <Container>\n          <Statistic horizontal >\n            <Statistic.Label><Icon name='inr' size='big' /></Statistic.Label>\n            <Statistic.Value>{this.getPaymentAmount() + '/-'}</Statistic.Value>\n          </Statistic>\n          {this.state.confirmed ?\n            <Payment amount={this.getPaymentAmount()} backlink={this.togglePage} />\n            :\n            <div>\n              <Billing amountTracker={this.updateAmount} items={this.state.items} toggleItemSelection={this.toggleItemSelection} />\n              <Segment raised className='mfooter'>\n                <Button primary animated disabled={this.getPaymentAmount() <= 0}\n                  onClick={this.togglePage}>\n                  <Button.Content visible>Continue</Button.Content>\n                  <Button.Content hidden>\n                    <Icon name='arrow right' />\n                  </Button.Content>\n                </Button>\n              </Segment>\n            </div>\n          }\n        </Container>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}